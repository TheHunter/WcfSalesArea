<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PersistentLayer</name>
    </assembly>
    <members>
        <member name="T:PersistentLayer.Exceptions.BusinessLayerException">
            <summary>
            Rappresents a generic exception when there's an error on managing the current Unit of Work.
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessLayerException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessLayerException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessLayerException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessLayerException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:PersistentLayer.Exceptions.BusinessLayerException.InvokerName">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.Exceptions.BusinessObjectException">
            <summary>
            Rappresents an generic error when business DAOs execute any kind of query on data store.
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessObjectException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessObjectException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.Exceptions.BusinessPersistentException">
            <summary>
            An exception which is thrown when a generic query is executed through DAO methods because of a failed persistent operation.
            </summary>
        </member>
        <member name="T:PersistentLayer.Exceptions.ExecutionQueryException">
            <summary>
            An exception which is thrown when a generic query is executed through DAO methods.
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.ExecutionQueryException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.ExecutionQueryException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.ExecutionQueryException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:PersistentLayer.Exceptions.ExecutionQueryException.MethodInvoker">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessPersistentException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessPersistentException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.BusinessPersistentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.Exceptions.CommitFailedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.CommitFailedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.CommitFailedException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.CommitFailedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.CommitFailedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.Exceptions.ContextRollbackException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.ContextRollbackException.#ctor(System.String,PersistentLayer.NHibernate.ITransactionInfo)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="transactionInfo"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.ContextRollbackException.#ctor(System.String,System.Exception,PersistentLayer.NHibernate.ITransactionInfo)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
            <param name="transactionInfo"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.ContextRollbackException.#ctor(System.String,PersistentLayer.NHibernate.ITransactionInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="transactionInfo"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.ContextRollbackException.#ctor(System.String,System.Exception,PersistentLayer.NHibernate.ITransactionInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
            <param name="transactionInfo"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:PersistentLayer.Exceptions.ContextRollbackException.TransactionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.Exceptions.ContextRollbackException.Cause">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.Exceptions.InnerRollBackException">
            <summary>
            Indicates an error has occurred when an inner transaction has invoked a rollback method.
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.InnerRollBackException.#ctor(System.String,PersistentLayer.NHibernate.ITransactionInfo)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="transactionInfo"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.InnerRollBackException.#ctor(System.String,System.Exception,PersistentLayer.NHibernate.ITransactionInfo)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
            <param name="transactionInfo"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.InnerRollBackException.#ctor(System.String,PersistentLayer.NHibernate.ITransactionInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="transactionInfo"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.InnerRollBackException.#ctor(System.String,System.Exception,PersistentLayer.NHibernate.ITransactionInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
            <param name="transactionInfo"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.Exceptions.MissingPropertyException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.MissingPropertyException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.MissingPropertyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="propertyName"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:PersistentLayer.Exceptions.MissingPropertyException.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.Exceptions.QueryArgumentException">
            <summary>
            An exception which is thrown when a generic query is executed through DAO methods because of an not valid argument
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.QueryArgumentException.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.QueryArgumentException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
            <param name="argumentName"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:PersistentLayer.Exceptions.QueryArgumentException.ArgumentName">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.Exceptions.QueryFormatException">
            <summary>
            An exception which is thrown when a generic query is executed through DAO methods because of an not valid query syntax.
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.QueryFormatException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.QueryFormatException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.QueryFormatException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="methodInvoker"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.Exceptions.RollbackFailedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.Exceptions.RollbackFailedException.#ctor(System.String,PersistentLayer.NHibernate.ITransactionInfo)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="transactionInfo"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.RollbackFailedException.#ctor(System.String,System.Exception,PersistentLayer.NHibernate.ITransactionInfo)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
            <param name="transactionInfo"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.RollbackFailedException.#ctor(System.String,PersistentLayer.NHibernate.ITransactionInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="transactionInfo"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.Exceptions.RollbackFailedException.#ctor(System.String,System.Exception,PersistentLayer.NHibernate.ITransactionInfo,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="cause"></param>
            <param name="transactionInfo"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.IPagedDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:PersistentLayer.IPersisterDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:PersistentLayer.IQueryableDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO`2.Exists(`1)">
            <summary>
            
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO`2.Exists(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            
            </summary>
            <param name="identifiers"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO`2.FindBy(`1)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO`2.FindAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.ITransactionContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.ITransactionContext.GetTransactionProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO`2.MakePersistent(`0)">
            <summary>
            Saves or updates the given instance, It depends upon the indentifier value.
            </summary>
            <param name="entity">the current instance which contains the state to persist.</param>
            <returns>returns the current persistent instance.</returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO`2.MakePersistent(`0,`1)">
            <summary>
            Updates the persistent state associated with the given identifier.
            </summary>
            <param name="entity">the current instance which contains the state to persist.</param>
            <param name="identifier">the persistent indentifier which be updated.</param>
            <returns>returns the current persistent instance.</returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO`2.MakePersistent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO`2.MakeTransient(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO`2.MakeTransient(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:PersistentLayer.IPagedDAO`2.GetPagedResult(System.Int32,System.Int32,System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPagedDAO`2.GetIndexPagedResult(System.Int32,System.Int32,System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.IPagedDAO">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.IPersisterDAO">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.IQueryableDAO">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO.Exists``2(``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO.Exists``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="identifiers"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO.FindBy``2(``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO.FindAll``1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IQueryableDAO.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO.MakePersistent``1(``0)">
            <summary>
            Saves or updates the given instance, It depends upon the indentifier value.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity">the current instance which contains the state to persist.</param>
            <returns>returns the current persistent instance.</returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO.MakePersistent``2(``0,``1)">
            <summary>
            Updates the persistent state associated with the given identifier.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="entity">the current instance which contains the state to persist.</param>
            <param name="identifier">the persistent indentifier which be updated.</param>
            <returns>returns the current persistent instance.</returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO.MakePersistent``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO.MakeTransient``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:PersistentLayer.IPersisterDAO.MakeTransient``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
        </member>
        <member name="M:PersistentLayer.IPagedDAO.GetPagedResult``1(System.Int32,System.Int32,System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPagedDAO.GetIndexPagedResult``1(System.Int32,System.Int32,System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.IPagedResult`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:PersistentLayer.IPagedResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.IPagedResult.StartIndex">
            <summary>
            The start index for taking instances for result paging.
            </summary>
        </member>
        <member name="P:PersistentLayer.IPagedResult.Size">
            <summary>
            The page size.
            </summary>
        </member>
        <member name="P:PersistentLayer.IPagedResult.Counter">
            <summary>
            returns the total row count of executed query.
            </summary>
        </member>
        <member name="P:PersistentLayer.IPagedResult.Result">
            <summary>
            return the result from paged result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.IPagedResult`1.GetResult">
            <summary>
            returns a new typed iterator which contains instances of paged result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.ITransactionProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.ITransactionProvider.Exists(System.String)">
            <summary>
            Indicates if there's a transaction with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.ITransactionProvider.BeginTransaction(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Begin a new transaction
            </summary>
            <param name="level"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessLayerException"></exception>
        </member>
        <member name="M:PersistentLayer.ITransactionProvider.BeginTransaction(System.String,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Begin a new transaction with the given name.
            </summary>
            <param name="name"></param>
            <param name="level"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessLayerException"></exception>
        </member>
        <member name="M:PersistentLayer.ITransactionProvider.CommitTransaction">
            <summary>
            Commit the transaction.
            </summary>
            <returns></returns>
            <exception cref="T:PersistentLayer.Exceptions.CommitFailedException">
            Throws an exception when current transaction tries to commit.
            </exception>
        </member>
        <member name="M:PersistentLayer.ITransactionProvider.RollbackTransaction">
            <summary>
            Makes a rollback the transaction.
            </summary>
            <exception cref="T:PersistentLayer.Exceptions.RollbackFailedException">
            Throws an exception when current transaction makes a rollback.
            </exception>
            <exception cref="T:PersistentLayer.Exceptions.InnerRollBackException">
            Throws an exception when an inner transaction makes a rollback.
            </exception>
        </member>
        <member name="M:PersistentLayer.ITransactionProvider.RollbackTransaction(System.Exception)">
            <summary>
            Makes a rollback, indicating the exception associated to the last transaction.
            </summary>
            <param name="cause"></param>
        </member>
        <member name="P:PersistentLayer.ITransactionProvider.InProgress">
            <summary>
            Indicates if the root transaction is in progress.
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.FutureQueryResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureQueryResolver.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureQueryResolver.ToFuture(NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.FutureFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureFunction.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureFunction.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="collectionType"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureFunction.ExecuteFuture(NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureFunction.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureFunction.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.FutureFunction.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PersistentLayer.NHibernate.FutureFunction.CollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.IDomainDAO">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.INhQueryableDAO">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO.ToIQueryable``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO.ToIQueryable``1(NHibernate.CacheMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO.ToIQueryable``1(System.String)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO.ToIQueryable``1(NHibernate.CacheMode,System.String)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindBy``2(``1,NHibernate.LockMode)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="id"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAll``1(System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="cacheable"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAll``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="cacheRegion"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAll``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="fetchSize"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAll``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAll``1(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAllFuture``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.FindAllFuture``1(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.GetFutureValue``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.GetFutureValue``2(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="FutureValue"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.Exists(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.Exists``1(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.RefreshState``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IDomainDAO.RefreshState``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.IEntityDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:PersistentLayer.NHibernate.INhQueryableDAO`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO`2.ToIQueryable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO`2.ToIQueryable(NHibernate.CacheMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO`2.ToIQueryable(System.String)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhQueryableDAO`2.ToIQueryable(NHibernate.CacheMode,System.String)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindBy(`1,NHibernate.LockMode)">
            <summary>
            Finds the object which matches with the given key.
            </summary>
            <param name="id">The key of instance to get.</param>
            <param name="mode">The type of locking for the instance to get, this argument can be null.</param>
            <returns>return an instance related to the calling type object.</returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAll(System.Boolean)">
            <summary>
            gets all instances from data source, and cache the query.
            </summary>
            <param name="cacheable">specify if cache will be switch on.</param>
            <returns>a set of instances from database.</returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAll(System.String)">
            <summary>
            
            </summary>
            <param name="cacheRegion"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAll(System.Int32)">
            <summary>
            sets the pre loaded of istances from the database.
            </summary>
            <param name="fetchSize"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAll(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAll(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAllFuture(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.FindAllFuture(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.GetFutureValue``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.GetFutureValue``1(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.Exists(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.Exists(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.RefreshState(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IEntityDAO`2.RefreshState(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.AbstractDAO">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.ISessionContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.ISessionContext.SessionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.AbstractDAO.GetTransactionProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.AbstractDAO.SessionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.AbstractDAO.CurrentSession">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.BusinessDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="VKey"></typeparam>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.EntityDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindBy(`1)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindBy(`1,NHibernate.LockMode)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll(System.Boolean)">
            <summary>
            
            </summary>
            <param name="cacheable"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll(System.String)">
            <summary>
            
            </summary>
            <param name="cacheRegion"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll(System.Int32)">
            <summary>
            
            </summary>
            <param name="fetchSize"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAll(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAllFuture(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.FindAllFuture(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.GetFutureValue``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.GetFutureValue``1(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.Exists(`1)">
            <summary>
            
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.Exists(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            
            </summary>
            <param name="identifiers"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.Exists(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.Exists(NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.MakePersistent(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.MakePersistent(`0,`1)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.MakePersistent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.MakeTransient(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.MakeTransient(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.RefreshState(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.RefreshState(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.ToIQueryable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.ToIQueryable(NHibernate.CacheMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.ToIQueryable(System.String)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EntityDAO`2.ToIQueryable(NHibernate.CacheMode,System.String)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.ISessionDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessDAO`2.#ctor(PersistentLayer.NHibernate.ISessionProvider)">
            <summary>
            
            </summary>
            <param name="sessionProvider"></param>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.BusinessDAO`2.SessionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:PersistentLayer.NHibernate.INhPagedDAO`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO`2.GetPagedResult(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO`2.GetPagedResult(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO`2.GetIndexPagedResult(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO`2.GetIndexPagedResult(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.#ctor(PersistentLayer.NHibernate.ISessionProvider)">
            <summary>
            
            </summary>
            <param name="sessionProvider"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.GetPagedResult(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.GetPagedResult(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.GetPagedResult(System.Int32,System.Int32,System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.GetIndexPagedResult(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.GetIndexPagedResult(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{`0})">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.BusinessPagedDAO`2.GetIndexPagedResult(System.Int32,System.Int32,System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.DomainDAO">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindBy``2(``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindBy``2(``1,NHibernate.LockMode)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="id"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1(System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="cacheable"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="cacheRegion"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="fetchSize"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAll``1(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAllFuture``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.FindAllFuture``1(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.GetFutureValue``1(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.GetFutureValue``2(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="FutureValue"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.Exists``2(``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.Exists``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="identifiers"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.Exists(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.Exists``1(NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.MakePersistent``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.MakePersistent``2(``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="entity"></param>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.MakePersistent``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.MakeTransient``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.MakeTransient``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.RefreshState``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.RefreshState``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.ToIQueryable``1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.ToIQueryable``1(NHibernate.CacheMode)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.ToIQueryable``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.DomainDAO.ToIQueryable``1(NHibernate.CacheMode,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="mode"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.EnterpriseDAO">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.ISessionDAO">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterpriseDAO.#ctor(PersistentLayer.NHibernate.ISessionProvider)">
            <summary>
            
            </summary>
            <param name="sessionProvider"></param>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.EnterpriseDAO.SessionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.INhPagedDAO">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO.GetPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO.GetPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO.GetIndexPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.INhPagedDAO.GetIndexPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.#ctor(PersistentLayer.NHibernate.ISessionProvider)">
            <summary>
            
            </summary>
            <param name="sessionProvider"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.GetPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.GetPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.GetPagedResult``1(System.Int32,System.Int32,System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.GetIndexPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.GetIndexPagedResult``1(System.Int32,System.Int32,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.EnterprisePagedDAO.GetIndexPagedResult``1(System.Int32,System.Int32,System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.NhPagedResult`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.NhPagedResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhPagedResult.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhPagedResult.#ctor(System.Int32,System.Int32,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.NhPagedResult.StartIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.NhPagedResult.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.NhPagedResult.Counter">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.Impl.NhPagedResult.Result">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhPagedResult`1.#ctor(System.Int32,System.Int32,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhPagedResult`1.#ctor(System.Int32,System.Int32,System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhPagedResult`1.GetResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.NhQueryExtensions">
            <summary>
            Extensions methods for DAO's.
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToFutureValue``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``0},``1}})">
            <summary>
            Converts lambda tree expression into IFutureValue object.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Merge``1(PersistentLayer.NHibernate.ISessionContext,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Merge(PersistentLayer.NHibernate.ISessionContext,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.IsCached``1(PersistentLayer.NHibernate.ISessionContext,``0)">
            <summary>
            Indicates if the argument is present into current session cache.
            </summary>
            <typeparam name="TEntity">Persistence instance</typeparam>
            <param name="sourceDAO">DAO which is associated into the current session.</param>
            <param name="instance">persistence instance to check.</param>
            <returns>returns a boolean value indicating if persistent entity is present into current session cache.</returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.IsCached(PersistentLayer.NHibernate.ISessionContext,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.IsCached``1(PersistentLayer.NHibernate.ISessionContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.IsCached(PersistentLayer.NHibernate.ISessionContext,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.GetIdentifier``2(PersistentLayer.NHibernate.ISessionContext,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.GetIdentifier(PersistentLayer.NHibernate.ISessionContext,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.SessionWithChanges(PersistentLayer.NHibernate.ISessionContext)">
            <summary>
            Indicates if the current session contains any changes which must be synchronized with the database.
            </summary>
            <param name="sourceDAO"></param>
            <returns>returns a boolean value indicating if the current session associated with the calling DAO contains any changes to persist.</returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Evict``1(PersistentLayer.NHibernate.ISessionContext,``0)">
            <summary>
            Evicts the persistent instance from session cache, if instance is cached into current session.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Evict(PersistentLayer.NHibernate.ISessionContext,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Evict``1(PersistentLayer.NHibernate.ISessionContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Evicts all instances present into collection argument, if instances are cached into current session.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="instances"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Evict(PersistentLayer.NHibernate.ISessionContext)">
            <summary>
            Evict all persistent instances from the current session cache.
            </summary>
            <param name="sourceDAO">DAO associated with session wich be clear.</param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.Flush(PersistentLayer.NHibernate.ISessionContext)">
            <summary>
            Force the current ISession to flush.
            </summary>
            <param name="sourceDAO"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.FindBy(PersistentLayer.NHibernate.ISessionContext,System.Type,System.Object,NHibernate.LockMode)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="type"></param>
            <param name="id"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakePersistent(PersistentLayer.NHibernate.ISessionContext,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakePersistent(PersistentLayer.NHibernate.ISessionContext,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <param name="identifier"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakePersistent(PersistentLayer.NHibernate.ISessionContext,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instances"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakeTransient(PersistentLayer.NHibernate.ISessionContext,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="instance"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.FindAll(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.GetPagedResult(PersistentLayer.NHibernate.ISessionContext,System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.GetPersistentClassInfo(PersistentLayer.NHibernate.ISessionContext,System.Type)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="classType"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessLayerException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformResult``2(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToProjectOver``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformFutureResult``2(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToProjectOverFuture``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformResult``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToProjectOver(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformFutureResult``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToProjectOverFuture(PersistentLayer.NHibernate.ISessionContext,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformResult``2(PersistentLayer.NHibernate.ISessionContext,NHibernate.Transform.IResultTransformer,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="transformer"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformFutureResult``2(PersistentLayer.NHibernate.ISessionContext,NHibernate.Transform.IResultTransformer,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="transformer"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformResult``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Transform.IResultTransformer,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            Set a strategy for handling the query results. This transforms the query result into specific collection typed.
            </summary>
            <typeparam name="TResult">The type of result</typeparam>
            <param name="sourceDAO"></param>
            <param name="transformer">The tranformer which converts the result query into collection result typed</param>
            <param name="criteria">The given detached criteria to invoke to get result to transforming.</param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformFutureResult``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Transform.IResultTransformer,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="transformer"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformResult``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Transform.IResultTransformer,NHibernate.ICriteria)">
            <summary>
            Set a strategy for handling the query results. This determines the "shape" of the query result set.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="transformer"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.TransformFutureResult``1(PersistentLayer.NHibernate.ISessionContext,NHibernate.Transform.IResultTransformer,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sourceDAO"></param>
            <param name="transformer"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToProjectOver(PersistentLayer.NHibernate.ISessionContext,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.ToProjectOverFuture(PersistentLayer.NHibernate.ISessionContext,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <param name="sourceDAO"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.GetNamedQuery(PersistentLayer.NHibernate.ISessionContext,System.String)">
            <summary>
            Get an instance of IQuery for a named query defined into mapping file.
            </summary>
            <param name="sourceDAO"></param>
            <param name="queryName"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakeSQLQuery(PersistentLayer.NHibernate.ISessionContext,System.String)">
            <summary>
            Make a NHibernate.ISQLQuery instance for the given SQL query string.
            </summary>
            <param name="sourceDAO"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryFormatException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakeHQLQuery(PersistentLayer.NHibernate.ISessionContext,System.String)">
            <summary>
            Make a IQuery instance for the given HQL string.
            </summary>
            <param name="sourceDAO"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryFormatException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryExtensions.MakeFilter``1(PersistentLayer.NHibernate.ISessionContext,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sourceDAO"></param>
            <param name="instances"></param>
            <param name="filter"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryFormatException"></exception>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.Impl.NhQueryImplementor">
            <summary>
            A basic class which implements all business DAO methods.
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindBy``2(NHibernate.ISession,``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="session"></param>
            <param name="id"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindBy``2(NHibernate.ISession,``1,NHibernate.LockMode)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="session"></param>
            <param name="id"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="where"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="cacheable"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="cacheRegion"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="fetchSize"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAll``1(NHibernate.ISession,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAllFuture``1(NHibernate.ISession,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.FindAllFuture``1(NHibernate.ISession,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetFutureValue``1(NHibernate.ISession,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="FutureValue"></typeparam>
            <param name="session"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetFutureValue``2(NHibernate.ISession,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="FutureValue"></typeparam>
            <param name="session"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.Exists``2(NHibernate.ISession,``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="session"></param>
            <param name="identifier"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.Exists``2(NHibernate.ISession,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="session"></param>
            <param name="identifiers"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.Exists(NHibernate.ISession,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.Exists``1(NHibernate.ISession,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.ToIQueryable``1(NHibernate.ISession)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.ToIQueryable``1(NHibernate.ISession,NHibernate.CacheMode)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.ToIQueryable``1(NHibernate.ISession,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="region"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.ToIQueryable``1(NHibernate.ISession,NHibernate.CacheMode,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="mode"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.MakePersistent``1(NHibernate.ISession,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="entity"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.MakePersistent``2(NHibernate.ISession,``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="session"></param>
            <param name="entity"></param>
            <param name="identifier"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.MakePersistent``1(NHibernate.ISession,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="entities"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.MakeTransient``1(NHibernate.ISession,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="entity"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.MakeTransient``1(NHibernate.ISession,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="entities"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessPersistentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.RefreshState``1(NHibernate.ISession,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="entity"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.RefreshState``1(NHibernate.ISession,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="entities"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.QueryArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="startIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <exception cref="T:PersistentLayer.Exceptions.ExecutionQueryException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetIndexPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,NHibernate.ICriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetIndexPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,NHibernate.Criterion.DetachedCriteria)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetIndexPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,NHibernate.Criterion.QueryOver{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetIndexPagedResult``1(NHibernate.ISession,System.Int32,System.Int32,System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.Impl.NhQueryImplementor.GetIdentifierName``1(NHibernate.ISession)">
            <summary>
            This method serves for looking for indentifier name of any persistent class.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="session"></param>
            <exception cref="T:System.TypeLoadException"></exception>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.InvalidSessionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.InvalidSessionException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.InvalidSessionException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.InvalidSessionException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.InvalidSessionException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
            <param name="exception"></param>
        </member>
        <member name="T:PersistentLayer.NHibernate.IPersistentClassInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.IPersistentClassInfo.ExistsProperty(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.IPersistentClassInfo.SetPropertyValue(System.Object,System.String,System.Object,NHibernate.EntityMode)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessObjectException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.MissingPropertyException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.IPersistentClassInfo.SetPropertyValues(System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},NHibernate.EntityMode)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="values"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessObjectException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.MissingPropertyException"></exception>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.IsInherited">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.HasProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.HasIdentifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.HasNaturalIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.HasSubclasses">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPersistentClassInfo.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.IPropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.TypeValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsMutable">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsAssociationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsXMLElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsCollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsComponentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.IPropertyInfo.IsAnyType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.ISessionBinderProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.ISessionProvider">
            <summary>
            Provides sessions by a higher implementation.
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.ISessionProvider.GetCurrentSession">
            <summary>
            Gets the current bounded session by a higher implementation level.
            </summary>
            <returns>Returns the current binded session by a higher implementation level.</returns>
            <exception cref="T:PersistentLayer.NHibernate.SessionNotBindedException">
            Throws an exception when there's no session binded into any CurrentSessionContext.
            </exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.ISessionBinderProvider.OpenSession">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.ISessionBinderProvider.BindSession(NHibernate.ISession,NHibernate.FlushMode)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="mode"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.ISessionBinderProvider.HasSessionBinded">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.ISessionBinderProvider.UnbindSession">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.ISessionManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.ISessionManager.SessionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.ITransactionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.ITransactionInfo.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.ITransactionInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.NhConfigurationBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileCfg"></param>
            <param name="dirMappingFiles"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="fileCfg"></param>
            <param name="mappingFiles"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.#ctor(System.Xml.XmlReader,System.IO.DirectoryInfo)">
            <summary>
            
            </summary>
            <param name="fileCfg"></param>
            <param name="directory"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.#ctor(NHibernate.Cfg.Configuration)">
            <summary>
            
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.#ctor(FluentNHibernate.Cfg.FluentConfiguration)">
            <summary>
            Makes a new Configuration instance from the given Fluent configuration.
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.OverrideProperty(System.String,System.String)">
            <summary>
            Sets the value of the Configuration property.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.SetProperty(System.String,System.String)">
            <summary>
            Sets the value of the Configuration property.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.SetProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the values of the Configuration properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.SetInterceptor(NHibernate.IInterceptor)">
            <summary>
            Sets the default interceptor object which be used by all session created by the SessionFactory.
            </summary>
            <param name="defaultInterceptor"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.NhConfigurationBuilder.BuildSessionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.NhConfigurationBuilder.HasClassMappings">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.NhConfigurationBuilder.Config">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.NhConfigurationBuilder.SessionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.PersistentClassInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.PersistentClassInfo.#ctor(NHibernate.Metadata.IClassMetadata)">
            <summary>
            
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.PersistentClassInfo.ExistsProperty(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.PersistentClassInfo.SetPropertyValue(System.Object,System.String,System.Object,NHibernate.EntityMode)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessObjectException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.MissingPropertyException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.PersistentClassInfo.SetPropertyValues(System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},NHibernate.EntityMode)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="values"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessObjectException"></exception>
            <exception cref="T:PersistentLayer.Exceptions.MissingPropertyException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.PersistentClassInfo.SetProperty(System.Object,System.String,System.Object,NHibernate.EntityMode)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.Exceptions.MissingPropertyException"></exception>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.IsInherited">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.HasProxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.HasIdentifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.HasNaturalIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.HasSubclasses">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PersistentClassInfo.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.PropertyMapInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.PropertyMapInfo.#ctor(NHibernate.Type.IType,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.PropertyMapInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.PropertyMapInfo.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.PropertyMapInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.TypeValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsMutable">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsAssociationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsXMLElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsCollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsComponentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.PropertyMapInfo.IsAnyType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.SessionBinderLayer`1">
            <summary>
            A session manager which gets binded and unbinded sessions.
            </summary>
            <typeparam name="TBinder">type of binder which uses this session manager.</typeparam>
        </member>
        <member name="T:PersistentLayer.NHibernate.SessionManager">
            <summary>
            Manages the session factory in order to open/manage Sessions.
            </summary>
        </member>
        <member name="F:PersistentLayer.NHibernate.SessionManager.sessionFactory">
            <summary>
            This is the factory which creates sessions, and It's able to reference the current binded session
            made by CurrentSessionContext
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.#ctor(NHibernate.ISessionFactory)">
            <summary>
            
            </summary>
            <param name="sessionFactory"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessLayerException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.GetCurrentSession">
            <summary>
            Gets the current binded session from the calling session manager.
            </summary>
            <returns>returns the current binded session</returns>
            <exception cref="T:PersistentLayer.NHibernate.SessionNotBindedException">
            Throws an exception when there's no session binded into any CurrentSessionContext.
            </exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.BeginTransaction(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Begin a new transaction from the current binded session with the specified IsolationLevel.
            </summary>
            <param name="level">IsolationLevel for this transaction.</param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessLayerException"></exception>
            <exception cref="T:PersistentLayer.NHibernate.SessionNotBindedException">
            Throws an exception when there's no session binded into any CurrentSessionContext.
            </exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.BeginTransaction(System.String,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="level"></param>
            <exception cref="T:PersistentLayer.Exceptions.BusinessLayerException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.CommitTransaction">
            <summary>
            Commit the current transaction and flushes the associated session.
            </summary>
            <exception cref="T:PersistentLayer.Exceptions.CommitFailedException">
            Throws an exception when current transaction tries to commit.
            </exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.RollbackTransaction">
            <summary>
            Makes a rollback into current transaction
            </summary>
            <exception cref="T:PersistentLayer.Exceptions.RollbackFailedException">
            Throws an exception when current transaction makes a rollback.
            </exception>
            <exception cref="T:PersistentLayer.Exceptions.InnerRollBackException">
            Throws an exception when an inner transaction makes a rollback.
            </exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionManager.RollbackTransaction(System.Exception)">
            <summary>
            
            </summary>
            <param name="cause"></param>
        </member>
        <member name="P:PersistentLayer.NHibernate.SessionManager.SessionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.SessionManager.InProgress">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionBinderLayer`1.#ctor(NHibernate.ISessionFactory)">
            <summary>
            
            </summary>
            <param name="sessionFactory"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionBinderLayer`1.OnInit">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionBinderLayer`1.OpenSession">
            <summary>
            
            </summary>
            <exception cref="T:PersistentLayer.NHibernate.SessionNotOpenedException"></exception>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionBinderLayer`1.BindSession(NHibernate.ISession,NHibernate.FlushMode)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="mode"></param>
            <exception cref="T:PersistentLayer.NHibernate.SessionNotAvailableException"></exception>
            <exception cref="T:PersistentLayer.NHibernate.InvalidSessionException"></exception>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionBinderLayer`1.HasSessionBinded">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionBinderLayer`1.UnbindSession">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:PersistentLayer.NHibernate.SessionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionInfo.#ctor(PersistentLayer.NHibernate.ISessionProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:PersistentLayer.NHibernate.SessionInfo.CurrentSession">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.SessionInfo.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.SessionNotAvailableException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotAvailableException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotAvailableException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotAvailableException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:PersistentLayer.NHibernate.SessionNotBindedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotBindedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotBindedException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotBindedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotBindedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="invokerName"></param>
            <param name="exception"></param>
        </member>
        <member name="T:PersistentLayer.NHibernate.SessionNotOpenedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotOpenedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotOpenedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.SessionNotOpenedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="invokerName"></param>
        </member>
        <member name="T:PersistentLayer.NHibernate.TransactionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.TransactionInfo.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.TransactionInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.TransactionInfo.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.TransactionInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PersistentLayer.NHibernate.TransactionInfo.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:PersistentLayer.NHibernate.TransactionInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.WCF.NhDispatchMessageInspector">
            <summary>
            Defines a base implementation for custom inspection or modification of inbound and outbound application messages in services applications.
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhDispatchMessageInspector.#ctor(NHibernate.ISessionFactory)">
            <summary>
            
            </summary>
            <param name="sessionFactory"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="channel"></param>
            <param name="instanceContext"></param>
            <returns></returns>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            
            </summary>
            <param name="reply"></param>
            <param name="correlationState"></param>
        </member>
        <member name="T:PersistentLayer.NHibernate.WCF.NhServiceBehaviorAttribute">
            <summary>
            Apply a new behavior into the calling service, adding a new IDispatchMessageInspector instance for binding / unbinding nhibernate sessions when an operation contract is called.
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhServiceBehaviorAttribute.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="sessionFactoyProvider">A property name which returns a session factory for this object.</param>
            <param name="provider"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhServiceBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
            <param name="endpoints"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhServiceBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.NhServiceBehaviorAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
        </member>
        <member name="T:PersistentLayer.NHibernate.WCF.ServiceArgumentException">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.WCF.WcfServiceException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.WcfServiceException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.WcfServiceException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.ServiceArgumentException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.ServiceArgumentException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.ServiceArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.ServiceArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="parameter"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:PersistentLayer.NHibernate.WCF.ServiceArgumentException.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="T:PersistentLayer.NHibernate.WCF.ServiceBehaviorException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.ServiceBehaviorException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PersistentLayer.NHibernate.WCF.ServiceBehaviorException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
    </members>
</doc>
